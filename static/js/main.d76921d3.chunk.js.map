{"version":3,"sources":["components/Movie.js","state/actions.js","components/AllMovies.js","App.js","serviceWorker.js","state/moviesReducer.js","index.js"],"names":["Movie","state","movieName","this","setState","props","m","Title","react_default","a","createElement","className","name","type","value","onChange","handleChangeTitle","bind","onBlur","ChangeTitle","src","Poster","alt","ev","Object","defineProperty","target","Component","movie","connect","dispatch","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","newNamesArr","wrap","_context2","prev","next","data","push","stop","_x2","apply","arguments","AllMovies","role","msg","reactstrap_es","handleChange","addonType","color","onClick","SearchMovie","index_es","icon","movies","map","components_Movie","key","imdbID","searchedMovie","allmovies","searchWord","_ref","_callee","res","_context","fetch","concat","sent","json","Search","_x","library","add","faSearch","App","components_AllMovies","Boolean","window","location","hostname","match","initialState","moviesReducer","length","undefined","action","newState","assign","date","Date","now","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d76921d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { ChangeTitle } from \"../state/actions\";\n\n\nclass Movie extends Component { \n\n\n\nstate={\n  movieName:\"\"\n}\n\ncomponentDidMount()\n{\n    this.setState({ movieName: this.props.m.Title });\n} \n \n\n\n  render() {\n    return (\n      <div className=\"Movie\">\n      <input className=\"movieTitle\" name=\"movieName\" type=\"text\" value={this.state.movieName} onChange={this.handleChangeTitle.bind(this)} onBlur={this.ChangeTitle.bind(this)}  /><br/>\n      <img src={this.props.m.Poster} alt=\"\"/>\n      </div>\n    );\n  }\n\n  handleChangeTitle(ev) { \n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n  ChangeTitle(){\n    this.props.ChangeTitle(this.state.movieName)\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {  \n  return  { \n    \n      ChangeTitle: function(movieName) { \n           \n           return  dispatch(ChangeTitle(movieName));\n          \n        }\n      }\n  };\n  \n\nconst movie = connect(null, mapDispatchToProps)(Movie);\n\nexport default movie;\n","export const SearchMovie = searchedMovie => {\r\n   \r\n    return async function (dispatch) {\r\n       \r\n        dispatch({\r\n            type: \"START_SEARCHING\",\r\n            data: null\r\n        });\r\n\r\n        \r\n        let res = await fetch(`http://www.omdbapi.com/?s=${searchedMovie}&apikey=fe9450d0`);\r\n        let data = await res.json();\r\n\r\n        dispatch({\r\n            type: \"MOVIES_FOUND\",\r\n            data: data.Search\r\n        });\r\n\r\n        dispatch({\r\n            type: \"FINISH_DOWNLOADING\",\r\n            data: null\r\n        });\r\n\r\n        \r\n\r\n    };\r\n}\r\n\r\nexport const ChangeTitle = movieName => {\r\n\r\n    return async function (dispatch) {\r\n\r\n        let newNamesArr = [];\r\n        dispatch({\r\n            type: \"TITLE_CHANGE\",\r\n            data: movieName\r\n        });\r\n        newNamesArr.push(movieName);\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { SearchMovie } from \"../state/actions\";\nimport { InputGroup, InputGroupAddon, Button, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Movie from './Movie';\n\nclass AllMovies extends Component {\n\n\n  render() {\n    return (\n      <div>\n\n        <div className=\"alert alert-info\" role=\"alert\">\n          {this.props.msg}\n        </div>\n\n        <div className=\"header\">\n          <h1>OMDb API</h1>\n          <h3>Search for your movie:</h3>\n\n          <InputGroup>\n            <Input type=\"text\" name=\"searchedMovie\" onChange={this.handleChange.bind(this)} />\n            <InputGroupAddon addonType=\"append\">\n              <Button color=\"info\" type=\"button\" onClick={this.SearchMovie.bind(this)}><FontAwesomeIcon icon=\"search\" /></Button><br />\n            </InputGroupAddon>\n          </InputGroup>\n\n        </div>\n\n        <div className=\"allMovies\">\n          {this.props.movies.map(m => <Movie key={m.imdbID} m={m} />)}\n        </div>\n\n      </div>\n    );\n  }\n\n  handleChange(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n  SearchMovie() {\n    this.props.SearchMovie(this.state.searchedMovie)\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return { movies: state.movies, msg: state.msg };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n\n    SearchMovie: function (searchWord) {\n\n      return dispatch(SearchMovie(searchWord));\n\n    }\n  }\n};\n\n\nconst allmovies = connect(mapStateToProps, mapDispatchToProps)(AllMovies);\n\nexport default allmovies;\n","import React, { Component } from 'react';\nimport AllMovies from './components/AllMovies';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSearch)\n\nclass App extends Component { \n  render() {\n    return (\n      <div className=\"App\">\n       <AllMovies   /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    movies: [],\r\n    msg: \"Welcome!\",\r\n};\r\n \r\nconst moviesReducer = (state = initialState, action) => {\r\n    \r\n    let newState = {};\r\n    switch (action.type) {\r\n\r\n        case 'START_SEARCHING': \r\n            newState = Object.assign({}, state, {\r\n                msg: \"start searching...\"\r\n            });\r\n            return newState;\r\n\r\n        case 'MOVIES_FOUND':\r\n            newState = Object.assign({}, state, {\r\n                movies: action.data,\r\n            });\r\n            return newState;\r\n\r\n        case 'FINISH_DOWNLOADING':\r\n            newState = Object.assign({}, state, {\r\n                msg: \"Movies found\"\r\n            });\r\n            return newState;\r\n\r\n        case \"TITLE_CHANGE\":\r\n            newState = Object.assign({}, state,{\r\n               msg:\"title changed\" \r\n            });\r\n            newState.date = Date.now();\r\n            return newState;\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default moviesReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n \nimport moviesReducer from \"./state/moviesReducer\";\nimport { Provider } from \"react-redux\"; \nimport { createStore, applyMiddleware } from 'redux'; \nimport thunk from 'redux-thunk';\n \nconst store = createStore(moviesReducer, applyMiddleware(thunk));\n\nReactDOM.render(  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}